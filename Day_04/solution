#!/opt/perl/bin/perl

use 5.026;

use strict;
use warnings;
no  warnings 'syntax';

use experimental 'signatures';

#
#
# You arrive at the Venus fuel depot only to discover it's protected
# by a password. The Elves had written the password on a sticky note,
# but someone threw it out.
# 
# However, they do remember a few key facts about the password:
# 
#     It is a six-digit number.
#     The value is within the range given in your puzzle input.
#     Two adjacent digits are the same (like 22 in 122345).
#     Going from left to right, the digits never decrease;
#     they only ever increase or stay the same (like 111123 or 135679).
#
# Other than the range rule, the following are true:
# 
#     111111 meets these criteria (double 11, never decreases).
#     223450 does not meet these criteria (decreasing pair of digits 50).
#     123789 does not meet these criteria (no double).
# 
# How many different passwords within the range given in your puzzle
# input meet these criteria?
#

#
# Part 2
#
# An Elf just remembered one more important detail: the two adjacent
# matching digits are not part of a larger group of matching digits.
# 
# Given this additional criterion, but still ignoring the range rule,
# the following are now true:
# 
#     112233 meets these criteria because the digits never decrease and
#     all repeated digits are exactly two digits long.
#     123444 no longer meets the criteria (the repeated 44 is part of a
#     larger group of 444).
#     111122 meets the criteria (even though 1 is repeated more than twice,
#     it still contains a double 22).
# 
# How many different passwords within the range given in your puzzle
# input meet all of the criteria?
#

my $input = shift // "input";
open my $fh, "<", $input or die;
my ($from, $to) = <$fh> =~ /^([0-9]+)-([0-9]+)/ or die "Failed to parse input";

my $count1 = 0;
my $count2 = 0;

foreach ($from .. $to) {
    #
    # We could simplify this using /(.)(.)(??{ something clever })/,
    # but writing out the cases for a mere 9 digits is way easier.
    #
    next if /10|2[01]|3[0-2]|4[0-3]|5[0-4]|6[0-5]|7[0-6]|8[0-7]|9[0-8]/;
    #
    # /(.)\1+/ matches the same thing, but we want to capture the
    # actual matches and additional params messes up things. 
    # Writing out 10 cases is an easy alternative.
    #
    my @seq = /0+|1+|2+|3+|4+|5+|6+|7+|8+|9+/g; # Get the lengths of all
    my @sequences = map {length} @seq;          # sequences of equal digits.
    $count1 ++ if grep {$_ >= 2} @sequences;
    $count2 ++ if grep {$_ == 2} @sequences;
}

say "Solution 1: ", $count1;
say "Solution 2: ", $count2;

__END__
